

*** additional packages ***

cd ${CMSSW_BASE}/src
cvs co -r V02-07-00 HiggsAnalysis/CombinedLimit/
cd -


------------------------------------
1: Calculate sideband extrapolation factor

a) necessary inputs: the final TTrees produced by the
EXO-VV analysis framework. The trees must have been produced from
the final collection of candidates, those with the full Selection
(i.e. one cand per event, either in signal or sideband region)

If you have a different format of the trees, see at the end of
these instructions. When you are ready with it, come back to this
point.

Inside fitSidebands.cpp, edit the paths to the TTrees ("inDir") and 
to the output directory ("myOutDir"). When it fills the TChain called
chainMC, make sure that you load the TTrees that you want (i.e.,
use the W+jets for XWW, the DY+jets for XZZ).

b) check the section of these instructions called "Other tunable 
things in the alpha calculation"

c) compile and execute. From the command line:

-$> make fitSidebands
-$> ./fitSidebands

Ignore error messages like 
Error in <TTree::Fill>: Failed filling branch:SelectedCandidatesV2.region, nbytes=-1, entry=19940
 This error is symptomatic of a Tree created as a memory-resident Tree


d) the code loops over the nXjet categories ( ==> 1-Jet and 2-Jet topologies)
and for each of them saves in the output directory:
    - mZZ_alpha_*J_ALL_Madgraph.eps : plot with the mZZ 
      distribution in the MC signal region (top), in the
      MC background region (middle) and the alpha historgram
      (bottom), before and after smoothing and the fit to it.
    - mZZ_alphaToys_*J_ALL.eps: in order to correctly estimate
      the stat uncertainty on the alpha histo, many pseudo-alpha
      hisots are generated variating the bins by their stat uncertainties
      (bins move in a totally uncorrelated way). This plot shows
      all these pseudo-alpha histos superimposed as blue lines
      (the central value, i.e. the original alpha, is shown 
      as red dots).
    - a .root file containing the TH1 of alpha (both smoothened 
      and not smoothened), the TF1 with the
      fit, a roofit workspace with more studies in it (see the code
      for more details), all the pseudo-alphas generated.



------------------------------------
2: apply the alpha ratio to the data in the sideband region + fit to
extrapolated background

------------------------------------
3: create datacards for statistical analysis 





****** Other tunable things in the alpha calculation **********


In SidebandFitter, at the top, there are some arrays with 
the binning of the histograms, one for each event category.
Tune them to your wishes.

Inside void SidebandFitter::alphaFit the code tries to fit
the alpha histogram. You may want to use the analytical fit
for rescaling your events in the data sidebands to the signal
region. 

When producing the alpha histo, a smoothing procedure is 
applied. This is aimed to eliminate zero content bins 
and fluctuations both related to poor MC statistics. 
The smoothign is done byt the function SidebandFitter::smoothHist,
it is called for both the histo at the denmoninator 
of the alpha ratio and the alpha histo itself. Check the code
if you want to have a more aggressive or more cautious approach.






****** what if my TTree is not like the EXO-VV ones ? ******

in the end, what you want is a TTree with the list of 
all your cands passing the full selection, either in
the signal and in the sideband region (the tree must contain
the OR of the two groups). The ttree must be generated
using only the bkgd MC samples. If you have many trees
containing different MC samples, you can merge them in 
a TChain and use the chain. 
Additionally, the tree must contain:

     - a flag that indicates whether the cand is in signal or
       sideband (the branch is called "region" in the exo-vv trees),
     - a flag indicating the lepton flavor ("lep", 0: ele, 1:mu),
     - the eventweight (re-weighting for lumi, PU, trigger effects,
       whatever else...)
     - a flag that encodes the event category of your event (example
       from exo-vv: the integer "nXjets" tells you if the cand was
       in the single-jet (a.k.a. merged jet) or double-jet topology 

You must change in fitSidebands.cpp and SidebandFitter the names of
the branches and the types according to your trees. For instance,
lep and region are doubles in the exo-vv trees (nXjets is a int).

At the start of fitSidebands there is the call to the funciton
CopyTreeVecToPlain . This is needed because the exo-vv trees
store in the branches std::vector of doubles and ints, this
is not really appreciated by RooFit. If your trees are already
"plain" (only ints, floats, doubles stored in the branches),
you can comment this part and pass your tree directly to 
the function  doAlpha.

In fitSidebands.cpp, inside doAlpha, there is a loop over the
values of the event categories. Of course, chedck that the loop
fits your needs.
